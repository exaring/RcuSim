#ifndef ESP32_BLE_REMOTE_CONTROL_H
#define ESP32_BLE_REMOTE_CONTROL_H
#include "sdkconfig.h"
#if defined(CONFIG_BT_ENABLED)

#include <Arduino.h>
#include <functional>
#include "Print.h"
#include <BLEDevice.h>
#include <BLEUtils.h>
#include <BLEServer.h>
#include <BLE2902.h>
#include <BLEHIDDevice.h>
#include <BLECharacteristic.h>
#include "HIDTypes.h"
#include <driver/adc.h>
#include "sdkconfig.h"


#if defined(CONFIG_ARDUHAL_ESP_LOG)
  #include "esp32-hal-log.h"
  #define LOG_TAG ""
#else
  #include "esp_log.h"
  static const char* LOG_TAG = "BLEDevice";
#endif

// Report IDs:
#define KEYBOARD_ID 0x01
#define MEDIA_KEYS_ID 0x02

static const uint8_t _hidReportDescriptor[] = {
  USAGE_PAGE(1),      0x01,          // USAGE_PAGE (Generic Desktop Ctrls)
  USAGE(1),           0x06,          // USAGE (Keyboard)
  COLLECTION(1),      0x01,          // COLLECTION (Application)
  // ------------------------------------------------- Keyboard
  REPORT_ID(1),       KEYBOARD_ID,   //   REPORT_ID (1)
  USAGE_PAGE(1),      0x07,          //   USAGE_PAGE (Kbrd/Keypad)
  USAGE_MINIMUM(1),   0xE0,          //   USAGE_MINIMUM (0xE0)
  USAGE_MAXIMUM(1),   0xE7,          //   USAGE_MAXIMUM (0xE7)
  LOGICAL_MINIMUM(1), 0x00,          //   LOGICAL_MINIMUM (0)
  LOGICAL_MAXIMUM(1), 0x01,          //   Logical Maximum (1)
  REPORT_SIZE(1),     0x01,          //   REPORT_SIZE (1)
  REPORT_COUNT(1),    0x08,          //   REPORT_COUNT (8)
  HIDINPUT(1),        0x02,          //   INPUT (Data,Var,Abs,No Wrap,Linear,Preferred State,No Null Position)
  REPORT_COUNT(1),    0x01,          //   REPORT_COUNT (1) ; 1 byte (Reserved)
  REPORT_SIZE(1),     0x08,          //   REPORT_SIZE (8)
  HIDINPUT(1),        0x01,          //   INPUT (Const,Array,Abs,No Wrap,Linear,Preferred State,No Null Position)
  REPORT_COUNT(1),    0x05,          //   REPORT_COUNT (5) ; 5 bits (Num lock, Caps lock, Scroll lock, Compose, Kana)
  REPORT_SIZE(1),     0x01,          //   REPORT_SIZE (1)
  USAGE_PAGE(1),      0x08,          //   USAGE_PAGE (LEDs)
  USAGE_MINIMUM(1),   0x01,          //   USAGE_MINIMUM (0x01) ; Num Lock
  USAGE_MAXIMUM(1),   0x05,          //   USAGE_MAXIMUM (0x05) ; Kana
  HIDOUTPUT(1),       0x02,          //   OUTPUT (Data,Var,Abs,No Wrap,Linear,Preferred State,No Null Position,Non-volatile)
  REPORT_COUNT(1),    0x01,          //   REPORT_COUNT (1) ; 3 bits (Padding)
  REPORT_SIZE(1),     0x03,          //   REPORT_SIZE (3)
  HIDOUTPUT(1),       0x01,          //   OUTPUT (Const,Array,Abs,No Wrap,Linear,Preferred State,No Null Position,Non-volatile)
  REPORT_COUNT(1),    0x06,          //   REPORT_COUNT (6) ; 6 bytes (Keys)
  REPORT_SIZE(1),     0x08,          //   REPORT_SIZE(8)
  LOGICAL_MINIMUM(1), 0x00,          //   LOGICAL_MINIMUM(0)
  LOGICAL_MAXIMUM(1), 0x65,          //   LOGICAL_MAXIMUM(0x65) ; 101 keys
  USAGE_PAGE(1),      0x07,          //   USAGE_PAGE (Kbrd/Keypad)
  USAGE_MINIMUM(1),   0x00,          //   USAGE_MINIMUM (0)
  USAGE_MAXIMUM(1),   0x65,          //   USAGE_MAXIMUM (0x65)
  HIDINPUT(1),        0x00,          //   INPUT (Data,Array,Abs,No Wrap,Linear,Preferred State,No Null Position)
  END_COLLECTION(0),                 // END_COLLECTION
  // ------------------------------------------------- Media Keys
  USAGE_PAGE(1),      0x0C,          // USAGE_PAGE (Consumer)
  USAGE(1),           0x01,          // USAGE (Consumer Control)
  COLLECTION(1),      0x01,          // COLLECTION (Application)
  REPORT_ID(1),       MEDIA_KEYS_ID, //   REPORT_ID (3)
  USAGE_PAGE(1),      0x0C,          //   USAGE_PAGE (Consumer)
  LOGICAL_MINIMUM(1), 0x00,          //   LOGICAL_MINIMUM (0)
  LOGICAL_MAXIMUM(1), 0x01,          //   LOGICAL_MAXIMUM (1)
  REPORT_SIZE(1),     0x01,          //   REPORT_SIZE (1) - 1 bit per key
/*
  REPORT_COUNT(1),    0x1A,          //   REPORT_COUNT (26) 26 bits for 26 defined media keys
  USAGE(1),           0x07,          //   USAGE (Program)  
  USAGE(1),           0x30,          //   USAGE (Power)  
  USAGE(1),           0x1C,          //   USAGE (TV)          
  USAGE(1),           0x40,          //   Usage (Menu)  
  USAGE(1),           0x41,          //   Usage (Ok)      
  USAGE(1),           0x42,          //   USAGE (Up)      
  USAGE(1),           0x43,          //   Usage (Down)   
  USAGE(1),           0x44,          //   USAGE (Left)  
  USAGE(1),           0x45,          //   Usage (Right) 
  USAGE(1),           0x9C,          //   Usage (Channel up)   
  USAGE(1),           0x9D,          //   Usage (Channel down)  
  USAGE(1),           0xB4,          //   Usage (Rewind)  
  USAGE(1),           0xB2,          //   Usage (Record)     
  USAGE(1),           0xB3,          //   Usage (FastForward)  
  USAGE(1),           0xB5,          //   Usage (Next) 
  USAGE(1),           0xB6,          //   Usage (Previous)     
  USAGE(2),           0xCD,          //   Usage (PlayPause)  
  USAGE(1),           0xE2,          //   Usage (Mute)  
  USAGE(1),           0xE9,          //   Usage (Volume up)  
  USAGE(1),           0xEA,          //   Usage (Volume down)  
  USAGE(2),           0x01, 0x02,    //   USAGE (Last Channel)   
  USAGE(2),           0x21, 0x02,    //   USAGE (Assistant) 
  USAGE(2),           0x23, 0x02,    //   Usage (Home)   
  USAGE(2),           0x24, 0x02,    //   Usage (Back) 
  USAGE(1),           0x0A,          //   Usage (App1 Netflix)  
  USAGE(2),           0xD2,          //   Usage (App2 Waiputhek)  
  HIDINPUT(1),        0x02,          //   INPUT (Data,Var,Abs,No Wrap,Linear,Preferred State,No Null Position)
  // -------- Padding to 32 Bits (6 Bits) ----------
  REPORT_COUNT(1),    0x06,
  REPORT_SIZE(1),     0x01,
  HIDINPUT(1),        0x01,          // Input (Const,Array,Abs)
  */
 REPORT_COUNT(1),    0x10,          //   REPORT_COUNT (26) 26 bits for 26 defined media keys
 USAGE(1),           0x07,          //   USAGE (Program)  
 USAGE(1),           0x30,          //   USAGE (Power)  
 USAGE(1),           0x1C,          //   USAGE (TV)          
 USAGE(1),           0x40,          //   Usage (Menu)  
 USAGE(1),           0x41,          //   Usage (Ok)      
 USAGE(1),           0x42,          //   USAGE (Up)      
 USAGE(1),           0x43,          //   Usage (Down)   
 USAGE(1),           0x44,          //   USAGE (Left)  
 USAGE(1),           0x45,          //   Usage (Right) 
 USAGE(1),           0x9C,          //   Usage (Channel up)   
 USAGE(1),           0x9D,          //   Usage (Channel down)  
 USAGE(1),           0xB4,          //   Usage (Rewind)  
 USAGE(1),           0xB2,          //   Usage (Record)     
 USAGE(1),           0xB3,          //   Usage (FastForward)  
 USAGE(1),           0xB5,          //   Usage (Next) 
 USAGE(1),           0xB6,          //   Usage (Previous)     
 HIDINPUT(1),        0x02,          //   INPUT (Data,Var,Abs,No Wrap,Linear,Preferred State,No Null Position)
 END_COLLECTION(0)                  // END_COLLECTION
};

//  Media Key mappings
#define KEY_MEDIA_PROG          0x00000001 // 00 00 01 - Consumer Control Program
#define KEY_MEDIA_POWER         0x00000002 // 00 00 02 - Consumer Control Power
#define KEY_MEDIA_TV            0x00000004 // 00 00 04 - Consumer Control TV
#define KEY_MEDIA_MENU          0x00000008 // 00 00 08 - Consumer Control Menu
#define KEY_MEDIA_OK            0x00000010 // 00 00 10 - Consumer Control OK
#define KEY_MEDIA_UP            0x00000020 // 00 00 20 - Consumer Control Up
#define KEY_MEDIA_DOWN          0x00000040 // 00 00 40 - Consumer Control Down
#define KEY_MEDIA_LEFT          0x00000080 // 00 00 80 - Consumer Control Left
#define KEY_MEDIA_RIGHT         0x00000100 // 00 01 00 - Consumer Control Right
#define KEY_MEDIA_CHANNEL_UP    0x00000200 // 00 02 00 - Consumer Control Channel Up
#define KEY_MEDIA_CHANNEL_DOWN  0x00000400 // 00 04 00 - Consumer Control Channel Down
#define KEY_MEDIA_REWIND        0x00000800 // 00 08 00 - Consumer Control Rewind
#define KEY_MEDIA_RECORD        0x00001000 // 00 10 00 - Consumer Control Record
#define KEY_MEDIA_FAST_FORWARD  0x00002000 // 00 20 00 - Consumer Control Fast Forward
#define KEY_MEDIA_NEXT          0x00004000 // 00 40 00 - Consumer Control Next
#define KEY_MEDIA_PREVIOUS      0x00008000 // 00 80 00 - Consumer Control Previous

#define KEY_MEDIA_PLAY_PAUSE    0x00010000 // 01 00 00 - Consumer Control Play/Pause
#define KEY_MEDIA_MUTE          0x00020000 // 02 00 00 - Consumer Control Mute
#define KEY_MEDIA_VOLUME_UP     0x00040000 // 04 00 00 - Consumer Control Volume Up
#define KEY_MEDIA_VOLUME_DOWN   0x00080000 // 08 00 00 - Consumer Control Volume Down
#define KEY_MEDIA_LASTCHANNEL   0x00100000 // 10 00 00 - Consumer Control Last Channel
#define KEY_MEDIA_ASSISTANT     0x00200000 // 20 00 00 - Consumer Control Assistant
#define KEY_MEDIA_HOME          0x00400000 // 40 00 00 - Consumer Control Home
#define KEY_MEDIA_BACK          0x00800000 // 80 00 00 - Consumer Control Back
#define KEY_MEDIA_APP_NETFLIX   0x01000000 // 00 00 00 - Consumer Control App Netflix
#define KEY_MEDIA_APP_WAIPUTHEK 0x02000000 // 00 00 00 - Consumer Control App Waiputhek


/**
 * @brief Keyboard report map.
 * 
 * Keyboard report descriptor (using format defined in USB HID specs)
 * https://www.usb.org/sites/default/files/documents/hid1_11.pdf
 */

//  Keyboard
#define KEY_LEFT_CTRL     0x80
#define KEY_LEFT_SHIFT    0x81
#define KEY_LEFT_ALT      0x82
#define KEY_LEFT_GUI      0x83
#define KEY_RIGHT_CTRL    0x84
#define KEY_RIGHT_SHIFT   0x85
#define KEY_RIGHT_ALT     0x86
#define KEY_RIGHT_GUI     0x87

#define KEY_UP_ARROW      0xDA
#define KEY_DOWN_ARROW    0xD9
#define KEY_LEFT_ARROW    0xD8
#define KEY_RIGHT_ARROW   0xD7
#define KEY_BACKSPACE     0xB2
#define KEY_TAB           0xB3
#define KEY_RETURN        0xB0
#define KEY_ESC           0xB1
#define KEY_INSERT        0xD1
#define KEY_DELETE        0xD4
#define KEY_PAGE_UP       0xD3
#define KEY_PAGE_DOWN     0xD6
#define KEY_HOME          0xD2
#define KEY_END           0xD5
#define KEY_CAPS_LOCK     0xC1
#define KEY_F1            0xC2
#define KEY_F2            0xC3
#define KEY_F3            0xC4
#define KEY_F4            0xC5
#define KEY_F5            0xC6
#define KEY_F6            0xC7
#define KEY_F7            0xC8
#define KEY_F8            0xC9
#define KEY_F9            0xCA
#define KEY_F10           0xCB
#define KEY_F11           0xCC
#define KEY_F12           0xCD
#define KEY_F13           0xF0
#define KEY_F14           0xF1
#define KEY_F15           0xF2
#define KEY_F16           0xF3
#define KEY_F17           0xF4
#define KEY_F18           0xF5
#define KEY_F19           0xF6
#define KEY_F20           0xF7
#define KEY_F21           0xF8
#define KEY_F22           0xF9
#define KEY_F23           0xFA
#define KEY_F24           0xFB
#define KEY_PRINT_SCREEN  0xCE
#define KEY_SCROLL_LOCK   0xCF
#define KEY_PAUSE         0xD0


//  Low level key report: up to 6 keys and shift, ctrl etc at once
typedef struct
{
  uint8_t modifiers;
  uint8_t reserved;
  uint8_t keys[6];
} KeyReport;

//  Media key report: 4 bytes to use for media keys as 26 keys are defined 
typedef uint8_t MediaKeyReport[4];

// Structure for key mapping
struct KeyMapping {
  const char* name;
  uint8_t keyCode;
};

// Structure for media key mapping
struct MediaKeyMapping {
  const char* name;
  uint32_t keyCode;  // Using uint32_t for media keys as 26 keys equates to 32 bits
};

// Mapping from string names to regular keycodes
const KeyMapping keyMappings[] = {
  {"up", KEY_UP_ARROW},
  {"down", KEY_DOWN_ARROW},
  {"left", KEY_LEFT_ARROW},
  {"right", KEY_RIGHT_ARROW},
  {"enter", KEY_RETURN},
  {"return", KEY_RETURN},
  {"esc", KEY_ESC},
  {"escape", KEY_ESC},
  {"backspace", KEY_BACKSPACE},
  {"tab", KEY_TAB},
  {"space", ' '},
  {"ctrl", KEY_LEFT_CTRL},
  {"alt", KEY_LEFT_ALT},
  {"shift", KEY_LEFT_SHIFT},
  {"win", KEY_LEFT_GUI},
  {"gui", KEY_LEFT_GUI},
  {"insert", KEY_INSERT},
  {"delete", KEY_DELETE},
  {"del", KEY_DELETE},
  {"home", KEY_HOME},
  {"end", KEY_END},
  {"pageup", KEY_PAGE_UP},
  {"pagedown", KEY_PAGE_DOWN},
  {"capslock", KEY_CAPS_LOCK},
  {"f1", KEY_F1},
  {"f2", KEY_F2},
  {"f3", KEY_F3},
  {"f4", KEY_F4},
  {"f5", KEY_F5},
  {"f6", KEY_F6},
  {"f7", KEY_F7},
  {"f8", KEY_F8},
  {"f9", KEY_F9},
  {"f10", KEY_F10},
  {"f11", KEY_F11},
  {"f12", KEY_F12},
  {"printscreen", KEY_PRINT_SCREEN},
  {"scrolllock", KEY_SCROLL_LOCK},
  {"pause", KEY_PAUSE}
};

// Mapping from string names to media keycodes
const MediaKeyMapping mediaKeyMappings[] = {
  {"power", KEY_MEDIA_POWER},
  {"assistant", KEY_MEDIA_ASSISTANT},
  {"program", KEY_MEDIA_PROG},
  {"prog", KEY_MEDIA_PROG},
  {"lastchannel", KEY_MEDIA_LASTCHANNEL},
  {"last", KEY_MEDIA_LASTCHANNEL},
  {"tv", KEY_MEDIA_TV},
  {"mkup", KEY_MEDIA_UP},
  {"mkleft", KEY_MEDIA_LEFT},
  {"ok", KEY_MEDIA_OK},
  {"mkright", KEY_MEDIA_RIGHT},
  {"back", KEY_MEDIA_BACK},
  {"mkdown", KEY_MEDIA_DOWN},
  {"menu", KEY_MEDIA_MENU},
  {"volumeup", KEY_MEDIA_VOLUME_UP},
  {"volup", KEY_MEDIA_VOLUME_UP},
  {"home", KEY_MEDIA_HOME},
  {"channelup", KEY_MEDIA_CHANNEL_UP},
  {"chup", KEY_MEDIA_CHANNEL_UP},
  {"volumedown", KEY_MEDIA_VOLUME_DOWN},
  {"voldown", KEY_MEDIA_VOLUME_DOWN},
  {"mute", KEY_MEDIA_MUTE},
  {"chdown", KEY_MEDIA_CHANNEL_DOWN},
  {"channeldown", KEY_MEDIA_CHANNEL_DOWN},
  {"rewind", KEY_MEDIA_REWIND},
  {"playpause", KEY_MEDIA_PLAY_PAUSE},
  {"pp", KEY_MEDIA_PLAY_PAUSE},
  {"fastforward", KEY_MEDIA_FAST_FORWARD},
  {"ff", KEY_MEDIA_FAST_FORWARD},
  {"previous", KEY_MEDIA_PREVIOUS},
  {"record", KEY_MEDIA_RECORD},
  {"next", KEY_MEDIA_NEXT},
  {"netflix", KEY_MEDIA_APP_NETFLIX},
  {"waiputhek", KEY_MEDIA_APP_WAIPUTHEK},  
  {"app1", KEY_MEDIA_APP_NETFLIX},
  {"app2", KEY_MEDIA_APP_WAIPUTHEK}  
};

const int NUM_KEY_MAPPINGS = sizeof(keyMappings) / sizeof(KeyMapping);
const int NUM_MEDIA_KEY_MAPPINGS = sizeof(mediaKeyMappings) / sizeof(MediaKeyMapping);

class BleRemoteControl : public Print, public BLEServerCallbacks, public BLECharacteristicCallbacks
{
private:
  BLEHIDDevice* hid;
  BLECharacteristic* inputKeyboard;
  BLECharacteristic* outputKeyboard;
  BLECharacteristic* inputMediaKeys;
  BLEAdvertising*    advertising;
  KeyReport      _keyReport;
  MediaKeyReport _mediaKeyReport;
  std::string deviceName;
  std::string deviceManufacturer;
  uint8_t     batteryLevel;
  bool connected = false;
  uint32_t _delay_ms = 7;
  uint16_t vid = 0x05ac;
  uint16_t pid = 0x820a;
  uint16_t version = 0x0210;
  BLEServer* pServer = nullptr;
  // Callback function for connection events
  typedef std::function<void(String)> ConnectionCallback;
  ConnectionCallback connectCallback = nullptr;

  bool isMediaKey(String key);
  uint32_t getMediaKeyCode(String key);
  uint8_t getKeyCode(String key);
  size_t press(uint8_t k);
  size_t pressMedia(const uint16_t keyCode);
  size_t release(uint8_t k);
  size_t releaseMedia();
  size_t release(const MediaKeyReport k);
  size_t write(uint8_t c);
  size_t write(const MediaKeyReport c);
  size_t write(const uint8_t *buffer, size_t size);

public:
  BleRemoteControl(std::string deviceName = "ESP32 BLE Remote Control", std::string deviceManufacturer = "Espressif", uint8_t batteryLevel = 100);
  void begin(void);
  void end(void);
  void sendReport(KeyReport* keys);
  void sendReport(MediaKeyReport* keys);
  void sendMediaKeyReport(uint16_t keys);
  void sendMediaKeyReport(uint32_t keys);
  size_t press(String key);
  size_t release(String key);
  bool sendKey(String k, uint32_t delay_ms = 0);
  bool sendPress(String key);
  bool sendRelease(String key);

  void releaseAll(void);
  bool isConnected(void);
  void setBatteryLevel(uint8_t level);
  uint8_t getBatteryLevel(void) { return this->batteryLevel; }
  void setName(std::string deviceName);
  void setDelay(uint32_t ms);
  void set_vendor_id(uint16_t vid);
  void set_product_id(uint16_t pid);
  void set_version(uint16_t version);
  void delay_ms(uint64_t ms);
  bool disconnect();      // Method to actively disconnect the connection
  bool removeBonding();   // Method to remove all pairings and bondings
  void startAdvertising(); // Method to specifically start advertising
  void stopAdvertising();  // Method to specifically stop advertising
  // Set callback function for connection events
  void setConnectionCallback(ConnectionCallback cb) { connectCallback = cb; }

protected:
  virtual void onStarted(BLEServer *pServer) { };
  virtual void onConnect(BLEServer* pServer);
  virtual void onDisconnect(BLEServer* pServer);
  virtual void onWrite(BLECharacteristic* me);
};

#endif // CONFIG_BT_ENABLED
#endif // ESP32_BLE_REMOTE_CONTROL_H